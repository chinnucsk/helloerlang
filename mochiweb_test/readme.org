* mochiweb 的使用
  1. 先得到源码 
   #+begin_src sh
   git clone git://github.com/mochi/mochiweb.git 
   #+end_src
  2. 在根目录下make 进行编译
  3.
    #+begin_src sh
      make app PROJECT=mochiweb_test 
    #+end_src
    然后在mochiweb 同级目录下会生成mochiweb_test目录
    在这个目录下，运行make 
    对这个项目进行一定的准备工作，比如得到它depend 的项目mochiweb(会上网继续下载mochiweb)
    启动mochiweb , 
    #+begin_src sh
        ./start-dev.sh
    #+end_src
    然后在浏览器里访问http://localhost:8080/
  mochiweb_test_web.erl 模块是处理具体业务 的模块。
  比如:
  #+begin_src erlang
....
                case Path of
                    "time" ->%% 新增了 /timer 这个 URL，它是一个 HTTP Chunked 的例子
                    Response = Req:ok({"text/plain", chunked}),
                    time(Response);
                    _ ->
                        Req:serve_file(Path, DocRoot)
                end;
...


%% 打印当前时间，间隔一秒，再在已经打开的 http 连接之上，再次打印，这也就是所谓 HTTP长连接/ServerPush 的一种
time(Resp)->
    Resp:write_chunk(io_lib:format("The time is: ~p~n",
                                   [calendar:local_time()])),
    timer:sleep(1000),
    time(Resp)        .
  #+end_src
  当访问http://localhost:8080/time 时,调用 time(Resp )方法进行处理,变是一种长
  连接
  
    
  
