# -*- coding:utf-8 -*-
#+LANGUAGE:  zh
#+TITLE:     gen_server 并发瓶颈测试
#+AUTHOR:    纪秀峰
#+EMAIL:     jixiuf@gmail.com
#+DATE:     2012-02-17 
#+DESCRIPTION:gen_server 并发测试
#+KEYWORDS: Erlang gen_server 并发
#+FILETAGS:@Erlang  

在gen_server主循环gen_server:loop中从消息队列中依次取出消息并处理，注意这是串行的，在
一条消息处理完毕之前，不会处理下一条消息。
这几个例子用来测试当并发很高时，gen_server 的瓶颈问题.
* gen_server 的瓶颈
  test1_client.erl
  test1_server.erl
* 解法1
  test2_client.erl
  test2_server.erl
  这种方法，其实是埋天过海、自欺欺人，gen_server 的瓶颈虽然解决了，但是瓶颈转移动
  具体的业务逻辑进程.
  具体做法是，在handle_call 中注册一个进程(只注册一个，并不是每次请求来都创建
  一个进程)用来处理具体费时的业务逻辑(处理完后
  用gen_server:reply 将结果返回给gen_server:call的调用者) ，
  而handle_call 本身则以{noreply,State}返回。

  惟一一点好处是，由于瓶颈的转移，gen_server在处理其他的
  handle_call,handle_cast 子句时，不会因某一handle_call子句的消息堆积过多而得不
  到及时的处理。
* 解法2 进程池
  灵感来源于解法1 ，解法1的缺点是 瓶颈转移到具体的业务逻辑处理进程（只有一个），
  而此法与之的惟一不同点是，起用多个业务逻辑处理进程 ，当收到消息时，平分到这
  几个进程里去处理。

  http://erlangdisplay.iteye.com/blog/397422
  这个帖子里面提到
  具体worker 的数量与scheduler数目一致（8核则数目为8)
  根据caller，获取当前执行scheduler的X，直接将request跳转到name_X的进程去处理
  根据scheduler数目创建进程组，减少单个进程处理瓶颈
  根据scheduler id直接跳转到进程组中某个进程，减少了中间查询，实现直接映射，效率更高.
** 每次请求都创建一个请的进程(未附测试代码)
    handle_call(Request,From,State)->
                spawn(fun() ->
                %%do some thing waste time,
                gen_server:reply(From,Resp)
                end ),
    {ok, State}.
